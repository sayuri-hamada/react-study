@use 'sass:math';
@use 'sass:string';
@use './variables' as *;

// 文字列を数値に変換
@function strip-unit($number) {
  @if type-of($number) == 'number' and not unitless($number) {
    @return math.div($number, ($number * 0 + 1));
  }

  @return $number;
}

// 文字列からワードを検索して置き換える
@function str-replace($string, $search, $replace: '') {
  $index: string.index($string, $search);

  @if $index {
    @return string.slice($string, 1, $index - 1) + $replace +
      str-replace(
        string.slice($string, $index + string.length($search)),
        $search,
        $replace
      );
  }

  @return $string;
}

// remで値を取得
@function rem($px, $base: 16px) {
  $value: $px;

  // 単位がpx以外の場合は警告を出してそのまま返す
  @if unit($px) != 'px' {
    @warn 'rem()の引数にpx以外の値を指定しても計算できません';
    @return $value;
  }

  $value: (math.div(strip-unit($px), strip-unit($base))) * 1rem;

  @return $value;
}

// emで値を取得
@function em($px, $base: 16px) {
  $value: $px;

  // 単位がpx以外の場合は警告を出してそのまま返す
  @if unit($px) != 'px' {
    @warn 'rem()の引数にpx以外の値を指定しても計算できません';
    @return $value;
  }

  $value: math.div(strip-unit($px), strip-unit($base)) * 1em;

  @return $value;
}

// vwの値を取得
@function vw($px, $base: 375px) {
  $value: $px;

  // 単位がpx以外の場合は警告を出してそのまま返す
  @if unit($px) != 'px' {
    @warn 'vw()の引数にpx以外の値を指定しても計算できません';
    @return $value;
  }

  $value: math.div(strip-unit($px), strip-unit($base)) * 100vw;

  @return $value;
}

// vhの値を取得
@function vh($px, $base: 375px) {
  $value: $px;

  // 単位がpx以外の場合は警告を出してそのまま返す
  @if unit($px) != 'px' {
    @warn 'vw()の引数にpx以外の値を指定しても計算できません';
    @return $value;
  }

  $value: math.div(strip-unit($px), strip-unit($base)) * 100vh;

  @return $value;
}

// ある範囲の線形補間に応じたvw値を取得
@function lerp-vw($bpLower, $bpUpper, $spMin, $spMax) {
  $a: math.round(math.div(100 * ($spMax - $spMin), ($bpUpper - $bpLower)));
  $b: math.round($spMin - math.div($bpLower, 100) * $a);

  @return clamp(#{rem($spMin)}, calc(#{$a}vw + #{rem($b)}), #{rem($spMax)});
}
